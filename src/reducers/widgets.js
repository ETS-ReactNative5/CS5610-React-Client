import CourseService from '../service/CourseService'
import axios from "axios";

this.CourseService = new CourseService();

const widgets = (state={widgets:[],preview:false} , action)=>{
    switch(action.type) {
        case "INIT":
            console.log("the actions is " , action)
            return {
                // widgets: state.widgets && state.selectedTopic.id === action.topic.id ? state.widgets : this.CourseService.findTopicById(action.topic.id),
                widgets:  action.widgets ,
                selectedTopic: action.topic,
                preview : state.preview
            };
        case "CREATE_WIDGET" :
            console.log("the create widget is called");
            let widget = {"id" : Math.round(Math.random()*1000000),"widgetType" : "HEADING", "size": 1,"text": "AutoGenerated Text" , "item":"" , "ordered":"" , "src" : "" };
            let newWidget = [...state.widgets];
            newWidget.push(widget)
            return {
                widgets : newWidget,
                update : true
            };

        case "RERENDER":
            return{
                widgets:state.widgets,
                selectedTopic : state.selectedTopic
            }

        case "DELETE_WIDGET" :
             axios({
                method : 'delete',
                url: "http://localhost:8080/api/widget/"+action.widget.id,
                withCredentials: true
            });
            return {
                widgets: state.widgets.filter(widget=>widget.id!==action.widget.id),
                selectedTopic: state.selectedTopic,
                preview : false
            };
        case "PREVIEW" :

            return{
                preview : action.decision,
                widgets: state.widgets,
                selectedTopic: state.selectedTopic
            };
        case "CHANGE_TYPE":
            return {
            widgets :state.widgets.map(widget=>{
                if(widget.id === action.widget.id){
                    if(action.kind ===1) {
                        widget.widgetType="HEADING"
                    }
                    else if(action.kind ===2){
                        widget.widgetType="PARAGRAPH"

                    }
                    else if(action.kind ===3){
                        widget.widgetType="LIST"

                    }
                    else if(action.kind ===4){
                        widget.widgetType="IMAGE"

                    }
                    else{
                        widget.widgetType="LINK"

                    }
                }
                return Object.assign({} , widget)
            }),
                selectedTopic: state.selectedTopic
        };
        case "ARROW_UP" :
            this.CourseService.arrowUp(state.selectedTopic.id , action.widget.id);
            return{
                widgets: this.CourseService.findWidgets(state.selectedTopic.id),
                selectedTopic: state.selectedTopic
            };
        case "ARROW_DOWN":
            this.CourseService.arrowDown(state.selectedTopic.id , action.widget.id);
            return{
                widgets: this.CourseService.findWidgets(state.selectedTopic.id),
                selectedTopic: state.selectedTopic
            };
        case "HEADING_CHANGE":
            return {
                widgets :state.widgets.map(widget=>{
                    if(widget.id === action.widget.id){
                        widget.size = action.id
                    }
                    return Object.assign({} , widget)
                }),
                selectedTopic: state.selectedTopic
            };
        case "LIST_CHANGE":
            return {
                widgets :state.widgets.map(widget=>{
                    if(widget.id === action.widget.id){
                        widget.order = action.id===1?"ordered":"unordered"
                    }
                    return Object.assign({} , widget)
                }),
                selectedTopic: state.selectedTopic
            };

        case "HANDLE_CHANGE":
            return{
                widgets :state.widgets.map(widget=>{
                    if(widget.id === action.widgetId){
                        widget.text = action.input
                    }
                    return Object.assign({} , widget)
                }),
                selectedTopic: state.selectedTopic
            };
        case "HANDLE_CHANGE_LIST" :
            return{
                widgets :state.widgets.map(widget=>{
                    if(widget.id === action.widgetId){
                        widget.text = action.input
                    }
                    return Object.assign({} , widget)
                }),
                selectedTopic: state.selectedTopic
            };
        case "HANDLE_CHANGE_IMAGE" :
            return{
                widgets :state.widgets.map(widget=>{
                    if(widget.id === action.widgetId){
                        widget.src = action.input
                    }
                    return Object.assign({} , widget)
                }),
                selectedTopic: state.selectedTopic
            };
        case "HANDLE_CHANGE_TEXT" :
            return{
                widgets :state.widgets.map(widget=>{
                    if(widget.id === action.widgetId){
                        widget.title = action.input
                    }
                    return Object.assign({} , widget)
                }),
                selectedTopic: state.selectedTopic
            };
        case "HANDLE_CHANGE_HREF" :
            return{
                widgets :state.widgets.map(widget=>{
                    if(widget.id === action.widgetId){
                        widget.href = action.input
                    }
                    return Object.assign({} , widget)
                }),
                selectedTopic: state.selectedTopic
            };
        case "HANDLE_SAVE" :
            console.log("the save widgets are " , action.widgets)
            axios({
                method : 'post',
                url : "http://localhost:8080/api/topic/"+action.topic.id+"/widget/save" ,
                data : action.widgets,
                withCredentials: true,
            });
            return{
                widgets: state.widgets,
                selectedTopic: state.selectedTopic
            };
        case "UPDATE_WIDGET" :
            this.CourseService.updateWidget(state.selectedTopic.id , action.widget);
            return {
                widgets: this.CourseService.findWidgets(state.selectedTopic.id),
                selectedTopic: state.selectedTopic
            };
        case "FIND_WIDGET" :
            return {
                widget : this.CourseService.findWidget(action.widgetId),
                selectedTopic: state.selectedTopic
            };
        case "FIND_ALL_WIDGETS_FOR_TOPIC" :
            return {
                widgets: this.CourseService.findWidgets(action.topic.id),
                selectedTopic: state.selectedTopic
            };
        case "FIND_ALL_WIDGETS" :
            return {
                widgets: this.CourseService.findWidgets(action.topic.id),
                selectedTopic: state.selectedTopic
            };
        default : return state

    }
};
    
export default widgets